#! /usr/bin/env python
# -*- python -*-

from __future__ import print_function
import os
import sys
import argparse

import pandas as pd



def main():

    parser = argparse.ArgumentParser(description='')

    ## paths
    parser.add_argument('filepath', nargs='?')
    parser.add_argument('dfpath', nargs='?')

    # ## general options
    # parser.add_argument('-t', '--type', action='store_true', help='Show object type')
    # parser.add_argument('--format', help='')

    # parser.add_argument('--cmd', help='Object method. For example GetEntries or GetBinContent(1)')

    # ## tree options
    # parser.add_argument('-s', '--selection', default='', help='Apply selection to tree')

    # parser.add_argument('--scan', help='Scan tree. Similar to TTree::Scan')
    # parser.add_argument('--sort', help='Sort scan output by this column')
    # parser.add_argument('-c', '--count', action='store_true')


    # ## edit options (onyl available if --edit)
    # parser.add_argument('--edit', action='store_true', help='Caution! you are modifying the file')
    # parser.add_argument('--delete', action='store_true', help='Caution! Delete all objects with this name. ')

    if len(sys.argv) < 2:
        parser.print_usage()
        return

    args = parser.parse_args()


    file_path, df_path = args.filepath, args.dfpath


    # pandas DataFrame (for now only h5)
    if file_path.endswith('.h5'):
        df = pd.read_hdf(file_path) ##, df_path)
        df.info()
        return 0


if __name__ == '__main__':
    main()
